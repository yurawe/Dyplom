import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.svm import OneClassSVM
from sklearn.neighbors import LocalOutlierFactor
from sklearn.covariance import EllipticEnvelope
from sklearn.impute import SimpleImputer
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import StandardScaler
from sklearn.covariance import EllipticEnvelope
from sklearn.svm import OneClassSVM

df = pd.read_csv("C:\\Data\\Final.csv", delimiter=";")

df_cleaned = df.dropna(thresh=2)


grouped_data = df.groupby('Active Case Finding TB cases diagnosed among tested (%)')['Year'].value_counts().sort_index()

# plt.figure(figsize=(20, 12))
#
#
# grouped_data.plot(kind='bar', color='blue')


# plt.title('Стовпчаста діаграма для X проти Y')
# plt.xlabel('Active Case Finding TB cases diagnosed among tested (%)')
# plt.ylabel('Кількість Y')


# plt.xticks(range(len(grouped_data.index)), grouped_data.index, rotation=90)


imputer = SimpleImputer(strategy='mean')


X = df_cleaned[['Active Case Finding TB cases diagnosed among tested (%)', 'Year']].values


X_imputed = imputer.fit_transform(X)


X_scaled = StandardScaler().fit_transform(X_imputed)


iForest = IsolationForest(n_estimators=20, verbose=2)
iForest.fit(X_scaled)

pred = iForest.predict(X_scaled)

df_cleaned['Treatment outcome of Female TB patients notified in (Success Rate)'] = df_cleaned['Treatment outcome of Female TB patients notified in (Success Rate)'].str.replace(',', '.').astype(float)


X_success_rate = df_cleaned[['Treatment outcome of Female TB patients notified in (Success Rate)', 'Year']].values


X_success_rate_imputed = imputer.fit_transform(X_success_rate)


X_success_rate_scaled = StandardScaler().fit_transform(X_success_rate_imputed)


iForest_success_rate = IsolationForest(n_estimators=20, verbose=2)
iForest_success_rate.fit(X_success_rate_scaled)


pred_success_rate = iForest_success_rate.predict(X_success_rate_scaled)


pred_scores_success_rate = -1*iForest_success_rate.score_samples(X_success_rate_imputed)


df['Treatment outcome of TB patients notified (Death Rate)'] = df['Treatment outcome of TB patients notified (Death Rate)'].str.replace(',', '.').astype(float)


imputer = SimpleImputer(strategy='mean')
df['Treatment outcome of TB patients notified (Death Rate)'] = imputer.fit_transform(df[['Treatment outcome of TB patients notified (Death Rate)']])


model = IsolationForest(contamination=0.01)
model.fit(df[['Treatment outcome of TB patients notified (Death Rate)']])


df['anomaly'] = model.predict(df[['Treatment outcome of TB patients notified (Death Rate)']])


plt.figure(figsize=(10,6))
plt.scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['anomaly'].map({1: 'green', -1: 'red'}))
plt.title('Anomaly in Treatment outcome of TB patients notified (Death Rate)')
plt.show()



outliers = df[model.predict(df[['Treatment outcome of TB patients notified (Death Rate)']]) < 0]


print(f"Outliers: {len(outliers)}")

lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)
df['lof_anomaly'] = lof.fit_predict(df[['Treatment outcome of TB patients notified (Death Rate)']])


plt.figure(figsize=(10,6))
plt.scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['lof_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('LOF Anomaly в Treatment outcome of TB patients notified (Death Rate)')
plt.show()


ocsvm = OneClassSVM(kernel='rbf', nu=0.01, gamma=0.1)
df['ocsvm_anomaly'] = ocsvm.fit_predict(df[['Treatment outcome of TB patients notified (Death Rate)']])


plt.figure(figsize=(10,6))
plt.scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['ocsvm_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('One-Class SVM Anomaly in Treatment outcome of TB patients notified (Death Rate)')
plt.show()


scaler = StandardScaler()
scaled_data = scaler.fit_transform(df[['Treatment outcome of TB patients notified (Death Rate)']])


envelope = EllipticEnvelope(contamination=0.01, support_fraction=0.9)
df['envelope_anomaly'] = envelope.fit_predict(scaled_data)


plt.figure(figsize=(10,6))
plt.scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['envelope_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('Elliptic Envelope Anomalies in Treatment outcome of TB patients notified (Death Rate)')
plt.show()


fig, axs = plt.subplots(2, 2, figsize=(15, 10))


axs[0, 0].scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['anomaly'].map({1: 'green', -1: 'red'}))
axs[0, 0].set_title('Isolation Forest')


axs[0, 1].scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['lof_anomaly'].map({1: 'green', -1: 'red'}))
axs[0, 1].set_title('Local Outlier Factor')


axs[1, 0].scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['ocsvm_anomaly'].map({1: 'green', -1: 'red'}))
axs[1, 0].set_title('One-Class SVM')


axs[1, 1].scatter(df.index, df['Treatment outcome of TB patients notified (Death Rate)'], color=df['envelope_anomaly'].map({1: 'green', -1: 'red'}))
axs[1, 1].set_title('Elliptic Envelope')


plt.tight_layout()
plt.show()


scaler = StandardScaler()
scaled_data = scaler.fit_transform(df[['Treatment outcome of TB patients notified (Death Rate)']])


model = IsolationForest(contamination=0.01)
df['iforest_anomaly'] = model.fit_predict(df[['Treatment outcome of TB patients notified (Death Rate)']])


lof = LocalOutlierFactor(n_neighbors=10, contamination=0.05)
df['lof_anomaly'] = lof.fit_predict(df[['Treatment outcome of TB patients notified (Death Rate)']])


ocsvm = OneClassSVM(kernel='rbf', nu=0.01, gamma=0.1)
df['ocsvm_anomaly'] = ocsvm.fit_predict(scaled_data)


envelope = EllipticEnvelope(contamination=0.01, support_fraction=0.9)
df['envelope_anomaly'] = envelope.fit_predict(scaled_data)


fig, axs = plt.subplots(2, 2, figsize=(15, 10))



axs[0, 0].scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'], color=df['iforest_anomaly'].map({1: 'green', -1: 'red'}))
axs[0, 0].set_title('Isolation Forest')
axs[0, 0].set_xlabel('Year')
axs[0, 0].set_ylabel('Treatment outcome of TB patients notified (Death Rate)')


axs[0, 1].scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'], color=df['lof_anomaly'].map({1: 'green', -1: 'red'}))
axs[0, 1].set_title('Local Outlier Factor')
axs[0, 1].set_xlabel('Year')
axs[0, 1].set_ylabel('Treatment outcome of TB patients notified (Death Rate)')


axs[1, 0].scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'], color=df['ocsvm_anomaly'].map({1: 'green', -1: 'red'}))
axs[1, 0].set_title('One-Class SVM')
axs[1, 0].set_xlabel('Year')
axs[1, 0].set_ylabel('Treatment outcome of TB patients notified (Death Rate)')


axs[1, 1].scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'], color=df['envelope_anomaly'].map({1: 'green', -1: 'red'}))
axs[1, 1].set_title('Elliptic Envelope')
axs[1, 1].set_xlabel('Year')
axs[1, 1].set_ylabel('Treatment outcome of TB patients notified (Death Rate)')


plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 6))
plt.scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'],
            color=df['iforest_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('Isolation Forest Anomalies in Treatment outcome of TB patients notified (Death Rate) (Year)')
plt.xlabel('Year')
plt.ylabel('Treatment outcome of TB patients notified (Death Rate)')
plt.show()


plt.figure(figsize=(10, 6))
plt.scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'],
            color=df['lof_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('Local Outlier Factor Anomalies in Treatment outcome of TB patients notified (Death Rate) (Year)')
plt.xlabel('Year')
plt.ylabel('Treatment outcome of TB patients notified (Death Rate)')
plt.show()



plt.figure(figsize=(10, 6))
plt.scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'],
            color=df['ocsvm_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('One-Class SVM Anomalies in Treatment outcome of TB patients notified (Death Rate) (Year)')
plt.xlabel('Year')
plt.ylabel('Treatment outcome of TB patients notified (Death Rate)')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Year'], df['Treatment outcome of TB patients notified (Death Rate)'], color=df['envelope_anomaly'].map({1: 'green', -1: 'red'}))
plt.title('Elliptic Envelope Anomalies in Treatment outcome of TB patients notified (Death Rate) (Year)')
plt.xlabel('Year')
plt.ylabel('Treatment outcome of TB patients notified (Death Rate)')
plt.show()

methods = ['iforest', 'lof', 'ocsvm', 'envelope']
for method in methods:
   anomalies = df[df[f'{method}_anomaly'] == -1]
   print(f"Number of anomalies detected by {method}: {len(anomalies)}")


#
# mean = df['Treatment outcome of TB patients notified (Death Rate)'].mean()
# std = df['Treatment outcome of TB patients notified (Death Rate)'].std()
# df['true_anomaly'] = np.where(
#     abs(df['Treatment outcome of TB patients notified (Death Rate)'] - mean) > 2 * std, -1, 1
# )
#
#
# from sklearn.metrics import precision_score, recall_score
#
# true_labels = df['true_anomaly']
#
# def calculate_metrics(true_labels, predicted_labels):
#     precision = precision_score(true_labels, predicted_labels, pos_label=-1)  # pos_label=-1 для аномалій
#     recall = recall_score(true_labels, predicted_labels, pos_label=-1)      # pos_label=-1 для аномалій
#     return precision, recall
#
# iforest_precision, iforest_recall = calculate_metrics(true_labels, df['iforest_anomaly'])
# print(f"Isolation Forest - Precision: {iforest_precision:.2f}, Recall: {iforest_recall:.2f}")
#
# lof_precision, lof_recall = calculate_metrics(true_labels, df['lof_anomaly'])
# print(f"Local Outlier Factor - Precision: {lof_precision:.2f}, Recall: {lof_recall:.2f}")
#
# ocsvm_precision, ocsvm_recall = calculate_metrics(true_labels, df['ocsvm_anomaly'])
# print(f"One-Class SVM - Precision: {ocsvm_precision:.2f}, Recall: {ocsvm_recall:.2f}")
#
# envelope_precision, envelope_recall = calculate_metrics(true_labels, df['envelope_anomaly'])
# print(f"Elliptic Envelope - Precision: {envelope_precision:.2f}, Recall: {envelope_recall:.2f}")
